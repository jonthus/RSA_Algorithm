import unittest
import sys
import os
sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))
import RSA
import Primes

class TestRSA(unittest.TestCase):

    def setUp(self):
        self.init = Primes.Primes()
        self.prime = self.init.primeGeneration(1024)
        self.lowPrimesList = self.init.lowPrimes()

    def test_generateKeys(self):
        p = 5
        q = 13
        e, d, n = RSA.generateKeys(p, q)
        phi = (p-1)*(q-1)
        e2 = 65537
        d2 = pow(e, -1, phi)
        n2 = p*q
        self.assertEqual((e, d, n), (e2, d2, n2))

    def test_encryption(self):
        p = 34872939812886080167820673177595277796309753458648197109283304211561020638919014922351969312442555515310149468909193782489681893095270108003918333443601681520180647343833453303372411918795630742544347237701704360995671426164632089840347964719706885225426183203983099830610507325970499495254411214591897208237
        q = 99328551639145105519979031959132211247595849812938582575108570401564960052404108992665411177309938313826806111047329607025234268564524812178020192296321509631370185513839637725168288582891929102546457914003871119335954082775449285517552032560150998686543295055647251957328050033943295387773243527948599424783
        e, d, n = RSA.generateKeys(p, q)
        correct = [1758848493088550516020964279870575958239608864333546862668479011897364525368812978582207237654606990697207670993134994195758576149991661469770907820302134250922763429226644868921849284226229905228752785242169972379847310823821801927988324174655205955608289665366067603058598299884786629111372628426861034253340777711597566301726413232699047518922617826992990348294167077104300580404053890770843372016504951216093487269524633488723324053991983067370115423622053999005268025804830579363100933128402163702165941949026008412430989221573831869344812966902879442054096208393660375593447831961223352221217413222839210274427]
        answer = RSA.encryption("a", e, n)
        self.assertEqual(answer, correct)

    def test_decryption(self):
        p = 34872939812886080167820673177595277796309753458648197109283304211561020638919014922351969312442555515310149468909193782489681893095270108003918333443601681520180647343833453303372411918795630742544347237701704360995671426164632089840347964719706885225426183203983099830610507325970499495254411214591897208237
        q = 99328551639145105519979031959132211247595849812938582575108570401564960052404108992665411177309938313826806111047329607025234268564524812178020192296321509631370185513839637725168288582891929102546457914003871119335954082775449285517552032560150998686543295055647251957328050033943295387773243527948599424783
        e, d, n = RSA.generateKeys(p, q)
        cipher = [1758848493088550516020964279870575958239608864333546862668479011897364525368812978582207237654606990697207670993134994195758576149991661469770907820302134250922763429226644868921849284226229905228752785242169972379847310823821801927988324174655205955608289665366067603058598299884786629111372628426861034253340777711597566301726413232699047518922617826992990348294167077104300580404053890770843372016504951216093487269524633488723324053991983067370115423622053999005268025804830579363100933128402163702165941949026008412430989221573831869344812966902879442054096208393660375593447831961223352221217413222839210274427]
        correct = "a"
        answer = RSA.decryption(cipher, d, n)
        self.assertEqual(answer, correct)

# EOF
